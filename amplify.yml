version: 1
applications:
  - appRoot: app
    frontend:
      phases:
        preBuild:
          commands:
            - mkdir -p /tmp/prisma-ci
            - export DATABASE_URL="${DATABASE_URL:-file:/tmp/prisma-ci/dev.db}"
            - if command -v nvm >/dev/null 2>&1; then nvm install 18 && nvm use 18; else echo "nvm not found"; fi
            - export HOME=/tmp
            - export XDG_CACHE_HOME=/tmp/.cache
            - export NPM_CONFIG_CACHE=/tmp/.npm
            - export TMPDIR=/tmp
            - mkdir -p "$HOME" "$XDG_CACHE_HOME" "$NPM_CONFIG_CACHE" "$TMPDIR"
            - export PRISMA_CACHE_DIR=/tmp/.cache/prisma
            - mkdir -p "$PRISMA_CACHE_DIR"
            - yarn install --frozen-lockfile --production=false
            - test -x ./node_modules/.bin/prisma || (echo "Prisma CLI not found in node_modules/.bin"; ls -la ./node_modules/.bin; exit 1)
            - node -e "console.log('os.homedir() =>', require('os').homedir())"
            - export PRISMA_CLI_QUERY_ENGINE_TYPE=library
            - export PRISMA_QUERY_ENGINE_LIBRARY="$(ls ./node_modules/@prisma/engines/libquery_engine-*.so.node | head -n1)"
            - export PRISMA_SCHEMA_ENGINE_BINARY="$(ls ./node_modules/@prisma/engines/schema-engine-* | head -n1)"
            - echo "PRISMA_QUERY_ENGINE_LIBRARY=$PRISMA_QUERY_ENGINE_LIBRARY"
            - echo "PRISMA_SCHEMA_ENGINE_BINARY=$PRISMA_SCHEMA_ENGINE_BINARY"
            - '[ -n "$PRISMA_QUERY_ENGINE_LIBRARY" ] || (echo "libquery_engine library not found"; ls -la ./node_modules/@prisma/engines; exit 1)'
            - '[ -n "$PRISMA_SCHEMA_ENGINE_BINARY" ] || (echo "schema-engine binary not found"; ls -la ./node_modules/@prisma/engines; exit 1)'
            - chmod +x "$PRISMA_SCHEMA_ENGINE_BINARY" 2>/dev/null || true
            - ./node_modules/.bin/prisma generate --schema ./prisma/schema.prisma
            - |
              if [[ "$AMPLIFY_BRANCH" =~ ^(master|main)$ && "$RUN_DB_TASKS" = "1" ]]; then
                yarn db:validate
              fi
        build:
          commands:
            - yarn build
        postBuild:
          commands:
            - export HOME=/tmp
            - export XDG_CACHE_HOME=/tmp/.cache
            - export NPM_CONFIG_CACHE=/tmp/.npm
            - export TMPDIR=/tmp
            - export PRISMA_CACHE_DIR=/tmp/.cache/prisma
            - mkdir -p "$HOME" "$XDG_CACHE_HOME" "$NPM_CONFIG_CACHE" "$TMPDIR" "$PRISMA_CACHE_DIR"
            - export PRISMA_CLI_QUERY_ENGINE_TYPE=library
            - export PRISMA_QUERY_ENGINE_LIBRARY="$(ls ./node_modules/@prisma/engines/libquery_engine-*.so.node | head -n1)"
            - export PRISMA_SCHEMA_ENGINE_BINARY="$(ls ./node_modules/@prisma/engines/schema-engine-* | head -n1)"
            - echo "PRISMA_QUERY_ENGINE_LIBRARY=$PRISMA_QUERY_ENGINE_LIBRARY"
            - echo "PRISMA_SCHEMA_ENGINE_BINARY=$PRISMA_SCHEMA_ENGINE_BINARY"
            - '[ -n "$PRISMA_QUERY_ENGINE_LIBRARY" ] || (echo "libquery_engine library not found"; ls -la ./node_modules/@prisma/engines; exit 1)'
            - '[ -n "$PRISMA_SCHEMA_ENGINE_BINARY" ] || (echo "schema-engine binary not found"; ls -la ./node_modules/@prisma/engines; exit 1)'
            - chmod +x "$PRISMA_SCHEMA_ENGINE_BINARY" 2>/dev/null || true
            - |
              if [[ "$AMPLIFY_BRANCH" =~ ^(master|main)$ && "$RUN_DB_TASKS" = "1" ]]; then
                if [ -d prisma/migrations ] && [ "$(ls -A prisma/migrations 2>/dev/null)" ]; then
                  ./node_modules/.bin/prisma migrate deploy --schema ./prisma/schema.prisma
                else
                  ./node_modules/.bin/prisma db push --skip-generate --schema ./prisma/schema.prisma
                fi
              fi
            - |
              if [[ "$AMPLIFY_BRANCH" =~ ^(master|main)$ && "$RUN_DB_TASKS" = "1" ]]; then
                yarn db:seed-production
              fi
      artifacts:
        baseDirectory: .next
        files:
          - '**/*'
      cache:
        paths:
          - node_modules/**/*
          - .next/cache/**/*