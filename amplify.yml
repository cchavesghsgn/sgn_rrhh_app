version: 1
applications:
  - appRoot: app
    frontend:
      phases:
        preBuild:
          commands:
            # Node 18
            - if command -v nvm >/dev/null 2>&1; then nvm install 18 && nvm use 18; else echo "nvm not found"; fi

            # Minimal diagnostics: confirm we are at appRoot and list contents
            - 'echo ">> preBuild cwd: $(pwd)"'
            - ls -la

            # Caches y tmp seguros
            - export HOME=/tmp
            - export XDG_CACHE_HOME=/tmp/.cache
            - export NPM_CONFIG_CACHE=/tmp/.npm
            - export TMPDIR=/tmp
            - mkdir -p "$HOME" "$XDG_CACHE_HOME" "$NPM_CONFIG_CACHE" "$TMPDIR"

            # Prisma: cache local
            - export PRISMA_CACHE_DIR=/tmp/.cache/prisma
            - mkdir -p "$PRISMA_CACHE_DIR"

            # Datasource seguro para CI (si no viene desde Amplify)
            - mkdir -p /tmp/prisma-ci
            - export DATABASE_URL="${DATABASE_URL:-file:/tmp/prisma-ci/dev.db}"

            # Dependencias (incluye devDependencies)
            - yarn install --frozen-lockfile --production=false

            # Sanity check: prisma CLI must exist after install
            - test -x ./node_modules/.bin/prisma || (echo "Prisma CLI not found in node_modules/.bin"; exit 1)

            # Forzar Node-API (library) y rutas que existen
            - export PRISMA_CLI_QUERY_ENGINE_TYPE=library
            - export PRISMA_QUERY_ENGINE_LIBRARY="$(ls ./node_modules/@prisma/engines/libquery_engine-*.so.node | head -n1)"
            - export PRISMA_SCHEMA_ENGINE_BINARY="$(ls ./node_modules/@prisma/engines/schema-engine-* | head -n1)"
            - '[ -n "$PRISMA_QUERY_ENGINE_LIBRARY" ] || (echo "libquery_engine library not found"; ls -la ./node_modules/@prisma/engines; exit 1)'
            - '[ -n "$PRISMA_SCHEMA_ENGINE_BINARY" ] || (echo "schema-engine binary not found"; ls -la ./node_modules/@prisma/engines; exit 1)'
            - chmod +x "$PRISMA_SCHEMA_ENGINE_BINARY" 2>/dev/null || true
            # Keep logs concise; avoid echoing engine paths

            # ⚠️ Generar el cliente de Prisma explícitamente (evita el error en Next build)
            - ./node_modules/.bin/prisma generate --schema ./prisma/schema.prisma
            # Verificar que se haya generado
            - test -f ./node_modules/.prisma/client/index.d.ts || (echo "Prisma client not generated"; ls -la ./node_modules/.prisma || true; exit 1)

            # Validación opcional (solo en main/master con RUN_DB_TASKS=1)
            - |
              if [[ "$AMPLIFY_BRANCH" =~ ^(master|main)$ && "$RUN_DB_TASKS" = "1" ]]; then
                yarn db:validate
              fi

        build:
          commands:
            - yarn build

        postBuild:
          commands:
            # Reasegurar envs para esta fase
            - export HOME=/tmp
            - export XDG_CACHE_HOME=/tmp/.cache
            - export NPM_CONFIG_CACHE=/tmp/.npm
            - export TMPDIR=/tmp
            - export PRISMA_CACHE_DIR=/tmp/.cache/prisma
            - mkdir -p "$HOME" "$XDG_CACHE_HOME" "$NPM_CONFIG_CACHE" "$TMPDIR" "$PRISMA_CACHE_DIR"

            # Minimal diagnostics: confirm cwd and contents before publishing
            - 'echo ">> postBuild cwd: $(pwd)"'
            - ls -la
            - echo ">> listing .next root" && ls -la .next || true
            - echo ">> listing .next/server" && ls -la .next/server || true
            - echo ">> listing .next/server/app" && ls -la .next/server/app || true
            - echo ">> BUILD_ID" && cat .next/BUILD_ID 2>/dev/null || true
            - echo ">> manifests in .next (maxdepth 2)" && find .next -maxdepth 2 -type f -name "*manifest*.json" -print || true
            - sed -n '1,120p' .next/required-server-files.json 2>/dev/null || true

            # Re-export Node-API por si el contexto cambia
            - export PRISMA_CLI_QUERY_ENGINE_TYPE=library
            - export PRISMA_QUERY_ENGINE_LIBRARY="$(ls ./node_modules/@prisma/engines/libquery_engine-*.so.node | head -n1)"
            - export PRISMA_SCHEMA_ENGINE_BINARY="$(ls ./node_modules/@prisma/engines/schema-engine-* | head -n1)"
            - '[ -n "$PRISMA_QUERY_ENGINE_LIBRARY" ] || (echo "libquery_engine library not found"; ls -la ./node_modules/@prisma/engines; exit 1)'
            - '[ -n "$PRISMA_SCHEMA_ENGINE_BINARY" ] || (echo "schema-engine binary not found"; ls -la ./node_modules/@prisma/engines; exit 1)'
            - chmod +x "$PRISMA_SCHEMA_ENGINE_BINARY" 2>/dev/null || true

            # Migraciones / sync de schema (solo en main/master y habilitado)
            - |
              if [[ "$AMPLIFY_BRANCH" =~ ^(master|main)$ && "$RUN_DB_TASKS" = "1" ]]; then
                if [ -d prisma/migrations ] && [ "$(ls -A prisma/migrations 2>/dev/null)" ]; then
                  ./node_modules/.bin/prisma migrate deploy --schema ./prisma/schema.prisma
                else
                  ./node_modules/.bin/prisma db push --skip-generate --schema ./prisma/schema.prisma
                fi
              fi

            # Seed opcional
            - |
              if [[ "$AMPLIFY_BRANCH" =~ ^(master|main)$ && "$RUN_DB_TASKS" = "1" ]]; then
                yarn db:seed-production
              fi

      artifacts:
        baseDirectory: .next
        files:
          - '**/*'
      cache:
        paths:
          - node_modules/**/*
          - .next/cache/**/*
